package com.reactnative.googlefit;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;

import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.fitness.Fitness;
import com.google.android.gms.fitness.data.Bucket;
import com.google.android.gms.fitness.data.DataPoint;
import com.google.android.gms.fitness.data.DataSet;
import com.google.android.gms.fitness.data.DataType;
import com.google.android.gms.fitness.data.Field;
import com.google.android.gms.fitness.request.DataReadRequest;
import com.google.android.gms.fitness.result.DataReadResult;

import java.text.DateFormat;
import java.util.concurrent.TimeUnit;

public class ComplexQueryAggregator {
    public static final String TAG = "ComplexQueryAggregator";

    /*public static Categories getAggregatedDataByDays(GoogleApiClient client, long startTime, long endTime) {
        DataReadRequest readRequest = queryAllData(startTime, endTime);
        DataReadResult dataReadResult = Fitness.HistoryApi.readData(client, readRequest).await(1, TimeUnit.MINUTES);
        Categories cats = new Categories();

        if (dataReadResult.getBuckets().size() > 0) {
            for (int dayInd=0; dayInd<dataReadResult.getBuckets().size(); dayInd++) {
                cats.initDay();
                Bucket bucket = dataReadResult.getBuckets().get(dayInd);
                for (int catInd=0; catInd<bucket.getDataSets().size(); catInd++) {//4 data sets: calories, steps, dist and active time
                    DataSet dataSet = bucket.getDataSets().get(catInd);
                    handleDataSet(dataSet, cats, startTime, dayInd, catInd);
                }
            }
        }
        return cats;
    }

    private static DataReadRequest queryAllData(long startTime, long endTime) {
        DateFormat dateFormat = DateFormat.getDateInstance();

        DataReadRequest readRequest = new DataReadRequest.Builder()
                .aggregate(DataType.TYPE_CALORIES_EXPENDED, DataType.AGGREGATE_CALORIES_EXPENDED)
                .aggregate(DataType.TYPE_DISTANCE_DELTA, DataType.AGGREGATE_DISTANCE_DELTA)
                .aggregate(DataType.TYPE_ACTIVITY_SEGMENT, DataType.AGGREGATE_ACTIVITY_SUMMARY)
                .aggregate(DataType.TYPE_STEP_COUNT_DELTA, DataType.AGGREGATE_STEP_COUNT_DELTA)
                .bucketByTime(1, TimeUnit.DAYS)
                .setTimeRange(startTime, endTime, TimeUnit.MILLISECONDS)
                .build();

        return readRequest;
    }

    private static void handleDataSet(DataSet dataSet, Categories cats, long startTime, int dayInd, int catInd) {
        //Log.i(TAG, "Data returned for Data type: " + dataSet.getDataType().getName());
        DateFormat dateFormat = DateFormat.getDateInstance();
        DateFormat timeFormat = DateFormat.getTimeInstance();
        if (dataSet.getDataPoints().size() == 0) {
            cats.getCurr(catInd).date = Utils.getDefaultTime(startTime, dayInd);
            cats.getCurr(catInd).value = 0;
        }
        else {
            DataPoint dp = dataSet.getDataPoints().get(0);
            Field field = dp.getDataType().getFields().get(0);
            cats.getCurr(catInd).date = dp.getStartTime(TimeUnit.MILLISECONDS);
            //if (dataSet.getDataType().getName().equals(DataType.TYPE_CALORIES_EXPENDED)) {
            cats.getCurr(catInd).value = dp.getValue(field);//.asFloat()
            //    } else
            //    if (dataSet.getDataType().getName().equals(DataType.TYPE_DISTANCE_DELTA)) {
            //        cats.getCurr(0).value = dp.getValue(field);//.asFloat()
            //    } else
            //    if (dataSet.getDataType().getName().equals(DataType.TYPE_ACTIVITY_SEGMENT)) {
            //        cats.getCurr(0).value = dp.getValue(field);//.asFloat()
            //    } else
            //    if (dataSet.getDataType().getName().equals(DataType.TYPE_STEP_COUNT_DELTA)) {
            //        cats.getCurr(0).value = dp.getValue(field);//.asFloat()
            //    }
            //}
        }
    }*/
}
